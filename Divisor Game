class Solution {
public:
    bool solve(int n,int turn)
    {
        if(n==1){
            if(turn==1){
                return false;
            }
            else{
                return true;
            }
        }
        
        bool flag1,flag2;
        if(turn==1){
            flag1=solve(n-1,0);
        }
        else{
            flag2=solve(n-1,1);
        }
        return flag1 || flag2;
    }
    bool divisorGame(int n) {
        return solve(n,1);
    }
};


int help(int n)
    {
         if(n==1){
            return 0;
         }
         else{
            for(int i=1;i<n;i++)
            {
                if(n%i==0)
                {
                    if(help(n-i)==0){
                        return 1;
                    }
                }
            }

            return 0;
         }
    }
    bool divisorGame(int n) {
        
        return help(n);
        
    }


class Solution {
public:
    
    int help(int n,vector<int> dp)
    {
        if(n==1){
            return 0;
        }
        if(dp[n]!=-1){
            return dp[n];
        }
        else{
          for(int i=1;i<=sqrt(n);i++)
            {
                if(n%i==0)
                {
                    if(help(n-i,dp)==0){
                        return dp[n]=1;
                    }
                }
            }
            return dp[n]=0;
        }   
    }
    bool divisorGame(int n) {
        vector<int>dp(n+1,-1);
        return help(n,dp);
        
    }
};

