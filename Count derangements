//Recursion
#define MOD 1000000007
class Solution {
  public:
    int solve(int n)
    {
        if(n<=2){
            return n-1;
        }
        
        return (n-1) % MOD * ((solve(n-1)%MOD) + ( solve(n-2) %MOD ));
    }
    int countDer(int n) {
        return solve(n);
    }
};


//Top Down
#define MOD 1000000007
class Solution {
  public:
    int solve(int n,vector<int>& dp)
    {
        if(n<=2){
            return n-1;
        }
        if(dp[n]!=-1){
            return dp[n];
        }
        
        
        dp[n]= ((n-1) % MOD) * ((solve(n-1,dp)%MOD) + ( solve(n-2,dp) %MOD ));
        return dp[n];
    }
    int countDer(int n) {
        vector<int>dp(n+1,-1);
        return solve(n,dp);
    }
};


Bottom up
#define MOD 1000000007
class Solution {
  public:
    int solve(int n)
    {
        vector<int>dp(n+1,-1);
        dp[0]=0;
        dp[1]=0;
        dp[2]=1;
        
        if(dp[n]!=-1){
            return dp[n];
        }
        
        for(int i=3;i<=n;i++)
        {
           dp[i]= ((i-1) % MOD) * ( (dp[i-1] % MOD) + ( dp[i-2] % MOD ) ); 
        } 
        
        return dp[n];
    }
    int countDer(int n) {
        if(n<=2){
            return n-1;
        }
        return solve(n);
    }
};
